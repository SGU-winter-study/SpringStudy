spring 입문 #1
간단한 웹 어플리케이션 개발 순서 (입문-실전)
-스프링 프로젝트 생성
-스프링 부트로 웹 서버 실행
-회원 도메인 개발
-웹 MVC 개발
-DB 연동 -JDBC, JPA, 스프링 데이터 JPA
-테스트 케이스 작성

~섹션1 프로젝트 환경 설정~
-사전준비물
IDE: intelliJ
Java11 설치

-프로젝트 생성
스프링 부트를 이용해 스프링 프로젝트를 만드는 경우가 많다. : start.spring.io
Project : Gradle Project를 많이 쓰는 추세
Language : Java
Spring Boot 버전 : 최신버전인 2.4.1
Dependencies : spring-boot-started-web, spring-boot-thymeleaf (HTML로 작성된 문서를 보기 위한 템플릿 엔진)

bulid.gradle을 intelliJ로 Open as Project
처음 프로젝트를 오픈하는 경우 외부에서 라이브러리 수십개를 다운받기에 네트워크 연결이 필요
src>>main>>java / resources
src>>test ; 테스트 코드와 관련된 소스가 들어가 있음 (요즘 개발 트렌드에 있어서 테스트 코드가 중요하다는 뜻)

(중요) buil.gradle ; gradle 프로젝트를 빌드하기 위한 파일. 
스프링 부트(start.spring.io)가 나오면서 초기 설정이 완료된 파일을 제공해줌 -> 편리!!
mavenCentral이라는 공개 사이트에서 라이브러리를 다운 받아온다.
Web, thymeleaf, junit(v5)가 여기서 다운로드 됨.

.gitignore
git에 소스코드만 올라가도록.. 역시 spring.io에서 만들어준 파일이다.
main을 실행시키면, 다음과 같은 문구가 뜸.
Tomcat started on port(s): 8080 (http) with context path ''
spring-boot-started-web은 Tomcat이라는 웹서버를 내장하고 있기 때문에, localhost:8080을 주소창에 입력하면 페이지가 나온다.

file>settings>gradle 에 들어가 build/run 그리고 run test를 모두 intelliJ 를 사용하게끔 바꾼다.
gradle를 통해서 하는 것보다 훨씬 빠르기 때문에

-라이브러리 살펴보기 
웹 어플리케이션을 위해 땡겨온 수많은 라이브러리들이 있음.
Gradle이나 Maven 같은 빌드 툴들은 의존관계를 관리를 해줌
spring-boot-starter-web이 필요한 라이브러리들(의존 관계가 있는)을 gradle이 다 가져온다는 뜻.
slf4j, logback -> log를 이용한 출력을 할 때 자주 사용.
test할 때 junit라이브러리를 사용 

-view 환경설정 
spring에 대해 검색하고 싶은 내용이 있을 때 : docs.spring.io/spring-boot/docs/current/reference/html/ 

스프링부트가 제공하는 welcom page는 정적 페이지
thymeleaf 템플릿 엔진을 이용해서 더 좋은 동적인 웹페이지를 만들 수 있음.

웹브라우저의 localhost:8080/hello 요청 -> 스프링부트에 내장된 톰캣 서버가 스프링에게 전달 -> hello controller에 작성한 "hello"의 url과 매칭, 해당 메서드가 실행됨 
-> 메서드가 hello를 리턴 -> templates 폴더 아래에 있는 hello.html 화면을 실행시키게 됨.
즉, 뷰 리졸버가 리턴값을 받아 templates 폴더 안에 있는 (리턴값이름).html 을 찾아서 보여줌.

-빌드하고 실행하기 
localhost:8080 가 올바른 작동을 하기 위해서는 intelliJ / git bash(혹은 cmd창) 둘 중에 "한 곳에서만" 빌드 과정이 이뤄져야 한다.

- 스프링 웹 개발 기초
웹 개발에는 3가지 방법 
1)정적 컨텐츠(서버에서 하는 것 없이 웹브라우저에 그대로 파일 전송) 
2)MVC와 템플릿 엔진(HTML을 서버에서 프로그래밍해서 조금 동적으로 변경한 것) : model, view, controller
정적컨텐츠는 파일을 웹브라우저에게 그대로 전달, mvc와 템플릿 엔진은 서버에서 약간의 꾸밈을 더한것.
3)API
안드로이드.아이폰 클라이언트에게 json이라는 데이터포맷으로 데이터를 전달해주는 방식
화면은 클라이언트가 알아서 그리도록
서버끼리 통신할 때도 역시 api 방식을 사용 (html이 필요없으니까)

각각의 동작 자세히
1) 정적컨텐츠 (그냥 파일 그 자체 전달)
스프링은 정적컨텐츠 기능을 기본적으로 제공 (ref: static content)
main>>resources>>static 에 .html 확장자를 가지는 파일 작성하면 화면에 그대로 보여줌
원리?
웹 브라우저가 localhost:8080/static.html 요청을 스프링 부트의 내장 톰켓 서버에 전송함
스프링은 static이라는 이름을 가진 컨트롤러가 있는지 먼저 찾음. (즉, 컨트롤러가 우선순위를 가짐)
매핑된 컨트롤러가 없으면 스프링 부트가 resources 폴더 안에 있는 static.html 파일을 찾아서 웹브라우저에게 반환해줌.

2) MVC와 템플릿 엔진 (렌더링이 된 html파일 전달)
Model, View, Controller
View는 화면과 관련된 일만 담당
Controller 비즈니스 로직, 서버를 담당
요즘에는 controller와 view를 분리시키는게 기본
html파일에서 ${ }의 의미 : 모델에서 값을 꺼내서 치환한다는 뜻
원리?
웹브라우저에서 localhost:8080/hello-mvc 요청. 내장 톰켓 서버는 스프링한테 "hello-mvc"를 전달
스프링은 helloController에서 매핑된 메서드(같은 "hello-mvc" 이름을 가지는 메서드)를 호출 
메서드에서 반환된 "hello-template"과 똑같은 string.html 파일을 찾아서 viewResolver에게 던져줌 (나한테 맞는 템플릿 엔진을 적용하게끔)
템플릿 엔진이 렌더링을 해서 변환된 html 파일을 웹브라우저에 반환.

3) api (스프링 개발에서 api 방식은 객체반환-json 방식-을 뜻함)
view 같은 게 없이 그대로 내용이 클라이언트에 전달됨. 
소스를 확인하면 html 태그가 하나도 없음, 데이터를 그대로 내려줌.
json : key, value 로 이루어진 구조 
xml방식/json방식 중에서는 json 방식이 많이 쓰임
xml 방식은 많은 태그 때문에 문자량이 늘어나 응답 시간이 느린 단점이 존재
원리?
웹브라우저의 localhost:8080/hello-api를 전달, 톰켓 서버는 스프링한테 hello-api를 전달
스프링은 Controller에서 hello-api 이름이 붙은 메서드를 실행. 
하지만 @ResponseBody 어노테이션이 붙으면 viewResolver에게 넘기지 않고, HttpMessageConver가 동작함. 
만약 전달받은게 객체라면 --> json 방식으로 데이터를 만들어서 http 요청에 응답
문자라면 --> HTTP의 BODY에 문자 내용을 직접 반환 
